@mixin box-shadow($value...) {
  -webkit-box-shadow: $value;
  -moz-box-shadow: $value;
  box-shadow: $value;
}

@mixin elevation($value) {
  @if $value == none {
    @include box-shadow(none);
  } @else {
    $box-shadow-color: min(0.1 + ($value / 33), 0.3);
    @include box-shadow(0 0 1px rgba(0, 0, 0, .2), 0 $value/2 $value rgba(0, 0, 0, $box-shadow-color));
  }
}

@mixin border-radius($value...) {
  -webkit-border-radius: $value;
  -moz-border-radius: $value;
  border-radius: $value;
}

@mixin border-radius-left($value...) {
  -webkit-border-bottom-left-radius: $value;
  border-bottom-left-radius: $value;
  -webkit-border-top-left-radius: $value;
  border-top-left-radius: $value;
}

@mixin border-radius-right($value...) {
  -webkit-border-bottom-right-radius: $value;
  border-bottom-right-radius: $value;
  -webkit-border-top-right-radius: $value;
  border-top-right-radius: $value;
}

@mixin transition($value...) {
  -webkit-transition: $value;
  -moz-transition: $value;
  -ms-transition: $value;
  -o-transition: $value;
  transition: $value;
}

@mixin transition-timing-function($value) {
  -webkit-transition-timing-function: $value;
  -moz-transition-timing-function: $value;
  -ms-transition-timing-function: $value;
  -o-transition-timing-function: $value;
  transition-timing-function: $value;
}

@mixin transition-property($value...) {
  -webkit-transition-property: $value;
  -moz-transition-property: $value;
  -ms-transition-property: $value;
  -o-transition-property: $value;
  transition-property: $value;
}

@mixin transform($value) {
  -webkit-transform: $value;
  -moz-transform: $value;
  -ms-transform: $value;
  -o-transform: $value;
  transform: $value;
}

@mixin transform-origin($value) {
  -webkit-transform-origin: $value;
  -moz-transform-origin: $value;
  -ms-transform-origin: $value;
  -o-transform-origin: $value;
  transform-origin: $value;;
}

@mixin animation($value...) {
  -webkit-animation: $value;
  -o-animation: $value;
  animation: $value;;
}

@mixin animation-delay($value) {
  -webkit-animation-delay: $value;
  -moz-animation-delay: $value;
  -o-animation-delay: $value;
  animation-delay: $value;
}

@mixin user-select($value) {
  -webkit-user-select: $value;
  -moz-user-select: $value;
  -ms-user-select: $value;
  user-select: $value;
}

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin padding($keys...) {
  @if length($keys) == 4 {
    padding: padding(nth($keys, 1)) padding(nth($keys, 2)) padding(nth($keys, 3)) padding(nth($keys, 4));
    @media screen and (max-width: $m-screen) {
      padding: m-padding(nth($keys, 1)) m-padding(nth($keys, 2)) m-padding(nth($keys, 3)) m-padding(nth($keys, 4));
    }

  } @else if length($keys) == 3 {
    padding: padding(nth($keys, 1)) padding(nth($keys, 2)) padding(nth($keys, 3));
    @media screen and (max-width: $m-screen) {
      padding: m-padding(nth($keys, 1)) m-padding(nth($keys, 2)) m-padding(nth($keys, 3));
    }

  } @else if length($keys) == 2 {
    padding: padding(nth($keys, 1)) padding(nth($keys, 2));
    @media screen and (max-width: $m-screen) {
      padding: m-padding(nth($keys, 1)) m-padding(nth($keys, 2));
    }

  } @else if length($keys) == 1 {
    padding: padding(nth($keys, 1));
    @media screen and (max-width: $m-screen) {
      padding: m-padding(nth($keys, 1));
    }

  }
}

@mixin margin($keys...) {
  @if length($keys) == 4 {
    margin: padding(nth($keys, 1)) padding(nth($keys, 2)) padding(nth($keys, 3)) padding(nth($keys, 4));
    @media screen and (max-width: $m-screen) {
      margin: m-padding(nth($keys, 1)) m-padding(nth($keys, 2)) m-padding(nth($keys, 3)) m-padding(nth($keys, 4));
    }

  } @else if length($keys) == 3 {
    margin: padding(nth($keys, 1)) padding(nth($keys, 2)) padding(nth($keys, 3));
    @media screen and (max-width: $m-screen) {
      margin: m-padding(nth($keys, 1)) m-padding(nth($keys, 2)) m-padding(nth($keys, 3));
    }

  } @else if length($keys) == 2 {
    margin: padding(nth($keys, 1)) padding(nth($keys, 2));
    @media screen and (max-width: $m-screen) {
      margin: m-padding(nth($keys, 1)) m-padding(nth($keys, 2));
    }

  } @else if length($keys) == 1 {
    margin: padding(nth($keys, 1));
    @media screen and (max-width: $m-screen) {
      margin: m-padding(nth($keys, 1));
    }

  }
}

@mixin font-size($key: default) {
  font-size: font-size($key);
  line-height: ceil(font-size($key) * strip-unit($line-height));

  @media screen and (max-width: $m-screen) {
    font-size: m-font-size($key);
    line-height: ceil(m-font-size($key) * strip-unit($line-height));
  }
}

@mixin transition-duration($key: default) {
  -webkit-transition-duration: duration($key);
  -moz-transition-duration: duration($key);
  -ms-transition-duration: duration($key);
  -o-transition-duration: duration($key);
  transition-duration: duration($key);

  @media screen and (max-width: $m-screen) {
    -webkit-transition-duration: m-duration($key);
    -moz-transition-duration: m-duration($key);
    -ms-transition-duration: m-duration($key);
    -o-transition-duration: m-duration($key);
    transition-duration: m-duration($key);
  }
}

@mixin transition-delay($value) {
  -webkit-transition-delay: $value;
  -moz-transition-delay: $value;
  -ms-transition-delay: $value;
  -o-transition-delay: $value;
  transition-delay: $value;
}
